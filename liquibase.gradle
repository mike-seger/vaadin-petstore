//file:noinspection GroovyAssignabilityCheck

dependencies {
	liquibaseRuntime "org.liquibase:liquibase-groovy-dsl:3.0.2"
	liquibaseRuntime "org.liquibase.ext:liquibase-hibernate5:4.3.5"
	liquibaseRuntime sourceSets.main.output
}

configurations.liquibaseRuntime.extendsFrom configurations.implementation

def entityPackage = project.hasProperty("entityPackage")?project.ext.entityPackage:project.group
def changeLogDir = "src/main/resources/db/changelog/"
def timeStamp = new Date().format("yyyyMMdd-HHmmss", TimeZone.getTimeZone("UTC"))
def dbChangeLogFileMaster = "${changeLogDir}db.changelog-master.yaml"
def dbChangeLogFile = "${changeLogDir}/schema/${timeStamp}.yaml"
def dbUrl = "jdbc:h2:./build/db/${entityPackage};DB_CLOSE_ON_EXIT=FALSE"
def refUrl = ( "hibernate:spring:${entityPackage}?" +
		"dialect=org.hibernate.dialect.H2Dialect" +
		"&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy" +
		"&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"
)

liquibase {
	activities {
		main {
			changeLogFile dbChangeLogFile
			changeLogParameters([ author: 'generated'])
			url dbUrl
			//referenceDriver "liquibase.ext.hibernate.database.connection.HibernateDriver"
			referenceUrl refUrl
		}
		update {
			changeLogFile dbChangeLogFileMaster
			url dbUrl
			referenceUrl refUrl
		}
	}
	runList = project.hasProperty("runList")?project.ext.runList:"main"
}

static def normalizedChangeSet(csString) {
	return csString.replaceAll(
		"(?s)^\\s+(id|constraintName|primaryKeyName|indexName): [A-Za-z0-9]*\$", "")
}

task liquibaseCleanup {
	shouldRunAfter diffChangeLog
	doLast {
		println("---- ${dbChangeLogFile}: checking generated changeset")
		def file = new File(dbChangeLogFile)
		if (file.exists()) {
			String text = file.text.replaceAll("author: .*generated.*", "author: petstore")
			if("databaseChangeLog:[]" ==
					text.replace("\n","").replace("\r", "").replaceAll("\\s+","")) {
				file.delete()
				println("---- ${dbChangeLogFile}: prevented empty changeset")
			} else {
				def files = file.getParentFile().listFiles()?.sort{a, b -> (a.name <=> b.name)}
				def index = files.findIndexOf { it == file }
				if(index > 0 && normalizedChangeSet(file.text) == normalizedChangeSet(files[index-1].text)) {
					file.delete()
					println("---- ${dbChangeLogFile}: prevented duplicate changeset")
				} else {
					file.text = text
					println("---- ${dbChangeLogFile}: updated author")
				}
			}
		}
	}
}

diffChangeLog.finalizedBy liquibaseCleanup

task h2Shell(type: JavaExec) {
	standardInput = System.in
	classpath = sourceSets.main.runtimeClasspath
	main = "org.h2.tools.Shell"
	args("-url", dbUrl)
}
